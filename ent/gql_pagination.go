// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/Arthur1/economical-graphql-server-demo/ent/artist"
	"github.com/Arthur1/economical-graphql-server-demo/ent/song"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ArtistEdge is the edge representation of Artist.
type ArtistEdge struct {
	Node   *Artist `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// ArtistConnection is the connection containing edges to Artist.
type ArtistConnection struct {
	Edges      []*ArtistEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *ArtistConnection) build(nodes []*Artist, pager *artistPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Artist
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Artist {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Artist {
			return nodes[i]
		}
	}
	c.Edges = make([]*ArtistEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ArtistEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ArtistPaginateOption enables pagination customization.
type ArtistPaginateOption func(*artistPager) error

// WithArtistOrder configures pagination ordering.
func WithArtistOrder(order *ArtistOrder) ArtistPaginateOption {
	if order == nil {
		order = DefaultArtistOrder
	}
	o := *order
	return func(pager *artistPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultArtistOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithArtistFilter configures pagination filter.
func WithArtistFilter(filter func(*ArtistQuery) (*ArtistQuery, error)) ArtistPaginateOption {
	return func(pager *artistPager) error {
		if filter == nil {
			return errors.New("ArtistQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type artistPager struct {
	reverse bool
	order   *ArtistOrder
	filter  func(*ArtistQuery) (*ArtistQuery, error)
}

func newArtistPager(opts []ArtistPaginateOption, reverse bool) (*artistPager, error) {
	pager := &artistPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultArtistOrder
	}
	return pager, nil
}

func (p *artistPager) applyFilter(query *ArtistQuery) (*ArtistQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *artistPager) toCursor(a *Artist) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *artistPager) applyCursors(query *ArtistQuery, after, before *Cursor) (*ArtistQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultArtistOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *artistPager) applyOrder(query *ArtistQuery) *ArtistQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultArtistOrder.Field {
		query = query.Order(DefaultArtistOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *artistPager) orderExpr(query *ArtistQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultArtistOrder.Field {
			b.Comma().Ident(DefaultArtistOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Artist.
func (a *ArtistQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ArtistPaginateOption,
) (*ArtistConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newArtistPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &ArtistConnection{Edges: []*ArtistEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ArtistOrderField defines the ordering field of Artist.
type ArtistOrderField struct {
	// Value extracts the ordering value from the given Artist.
	Value    func(*Artist) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) artist.OrderOption
	toCursor func(*Artist) Cursor
}

// ArtistOrder defines the ordering of Artist.
type ArtistOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *ArtistOrderField `json:"field"`
}

// DefaultArtistOrder is the default ordering of Artist.
var DefaultArtistOrder = &ArtistOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ArtistOrderField{
		Value: func(a *Artist) (ent.Value, error) {
			return a.ID, nil
		},
		column: artist.FieldID,
		toTerm: artist.ByID,
		toCursor: func(a *Artist) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Artist into ArtistEdge.
func (a *Artist) ToEdge(order *ArtistOrder) *ArtistEdge {
	if order == nil {
		order = DefaultArtistOrder
	}
	return &ArtistEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// SongEdge is the edge representation of Song.
type SongEdge struct {
	Node   *Song  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// SongConnection is the connection containing edges to Song.
type SongConnection struct {
	Edges      []*SongEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *SongConnection) build(nodes []*Song, pager *songPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Song
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Song {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Song {
			return nodes[i]
		}
	}
	c.Edges = make([]*SongEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SongEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SongPaginateOption enables pagination customization.
type SongPaginateOption func(*songPager) error

// WithSongOrder configures pagination ordering.
func WithSongOrder(order *SongOrder) SongPaginateOption {
	if order == nil {
		order = DefaultSongOrder
	}
	o := *order
	return func(pager *songPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSongOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSongFilter configures pagination filter.
func WithSongFilter(filter func(*SongQuery) (*SongQuery, error)) SongPaginateOption {
	return func(pager *songPager) error {
		if filter == nil {
			return errors.New("SongQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type songPager struct {
	reverse bool
	order   *SongOrder
	filter  func(*SongQuery) (*SongQuery, error)
}

func newSongPager(opts []SongPaginateOption, reverse bool) (*songPager, error) {
	pager := &songPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSongOrder
	}
	return pager, nil
}

func (p *songPager) applyFilter(query *SongQuery) (*SongQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *songPager) toCursor(s *Song) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *songPager) applyCursors(query *SongQuery, after, before *Cursor) (*SongQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSongOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *songPager) applyOrder(query *SongQuery) *SongQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSongOrder.Field {
		query = query.Order(DefaultSongOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *songPager) orderExpr(query *SongQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSongOrder.Field {
			b.Comma().Ident(DefaultSongOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Song.
func (s *SongQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SongPaginateOption,
) (*SongConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSongPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SongConnection{Edges: []*SongEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SongOrderField defines the ordering field of Song.
type SongOrderField struct {
	// Value extracts the ordering value from the given Song.
	Value    func(*Song) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) song.OrderOption
	toCursor func(*Song) Cursor
}

// SongOrder defines the ordering of Song.
type SongOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *SongOrderField `json:"field"`
}

// DefaultSongOrder is the default ordering of Song.
var DefaultSongOrder = &SongOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SongOrderField{
		Value: func(s *Song) (ent.Value, error) {
			return s.ID, nil
		},
		column: song.FieldID,
		toTerm: song.ByID,
		toCursor: func(s *Song) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Song into SongEdge.
func (s *Song) ToEdge(order *SongOrder) *SongEdge {
	if order == nil {
		order = DefaultSongOrder
	}
	return &SongEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}
