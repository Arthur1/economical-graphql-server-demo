// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"

	"github.com/Arthur1/economical-graphql-server-demo/ent/artist"
	"github.com/Arthur1/economical-graphql-server-demo/ent/predicate"
	"github.com/Arthur1/economical-graphql-server-demo/ent/song"
)

// ArtistWhereInput represents a where input for filtering Artist queries.
type ArtistWhereInput struct {
	Predicates []predicate.Artist  `json:"-"`
	Not        *ArtistWhereInput   `json:"not,omitempty"`
	Or         []*ArtistWhereInput `json:"or,omitempty"`
	And        []*ArtistWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "songs" edge predicates.
	HasSongs     *bool             `json:"hasSongs,omitempty"`
	HasSongsWith []*SongWhereInput `json:"hasSongsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ArtistWhereInput) AddPredicates(predicates ...predicate.Artist) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ArtistWhereInput filter on the ArtistQuery builder.
func (i *ArtistWhereInput) Filter(q *ArtistQuery) (*ArtistQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyArtistWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyArtistWhereInput is returned in case the ArtistWhereInput is empty.
var ErrEmptyArtistWhereInput = errors.New("ent: empty predicate ArtistWhereInput")

// P returns a predicate for filtering artists.
// An error is returned if the input is empty or invalid.
func (i *ArtistWhereInput) P() (predicate.Artist, error) {
	var predicates []predicate.Artist
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, artist.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Artist, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, artist.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Artist, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, artist.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, artist.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, artist.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, artist.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, artist.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, artist.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, artist.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, artist.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, artist.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, artist.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, artist.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, artist.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, artist.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, artist.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, artist.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, artist.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, artist.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, artist.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, artist.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, artist.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, artist.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, artist.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasSongs != nil {
		p := artist.HasSongs()
		if !*i.HasSongs {
			p = artist.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSongsWith) > 0 {
		with := make([]predicate.Song, 0, len(i.HasSongsWith))
		for _, w := range i.HasSongsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSongsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, artist.HasSongsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyArtistWhereInput
	case 1:
		return predicates[0], nil
	default:
		return artist.And(predicates...), nil
	}
}

// SongWhereInput represents a where input for filtering Song queries.
type SongWhereInput struct {
	Predicates []predicate.Song  `json:"-"`
	Not        *SongWhereInput   `json:"not,omitempty"`
	Or         []*SongWhereInput `json:"or,omitempty"`
	And        []*SongWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "released_year" field predicates.
	ReleasedYear      *int  `json:"releasedYear,omitempty"`
	ReleasedYearNEQ   *int  `json:"releasedYearNEQ,omitempty"`
	ReleasedYearIn    []int `json:"releasedYearIn,omitempty"`
	ReleasedYearNotIn []int `json:"releasedYearNotIn,omitempty"`
	ReleasedYearGT    *int  `json:"releasedYearGT,omitempty"`
	ReleasedYearGTE   *int  `json:"releasedYearGTE,omitempty"`
	ReleasedYearLT    *int  `json:"releasedYearLT,omitempty"`
	ReleasedYearLTE   *int  `json:"releasedYearLTE,omitempty"`

	// "artist_id" field predicates.
	ArtistID      *int  `json:"artistID,omitempty"`
	ArtistIDNEQ   *int  `json:"artistIDNEQ,omitempty"`
	ArtistIDIn    []int `json:"artistIDIn,omitempty"`
	ArtistIDNotIn []int `json:"artistIDNotIn,omitempty"`

	// "artist" edge predicates.
	HasArtist     *bool               `json:"hasArtist,omitempty"`
	HasArtistWith []*ArtistWhereInput `json:"hasArtistWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *SongWhereInput) AddPredicates(predicates ...predicate.Song) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the SongWhereInput filter on the SongQuery builder.
func (i *SongWhereInput) Filter(q *SongQuery) (*SongQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptySongWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptySongWhereInput is returned in case the SongWhereInput is empty.
var ErrEmptySongWhereInput = errors.New("ent: empty predicate SongWhereInput")

// P returns a predicate for filtering songs.
// An error is returned if the input is empty or invalid.
func (i *SongWhereInput) P() (predicate.Song, error) {
	var predicates []predicate.Song
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, song.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Song, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, song.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Song, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, song.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, song.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, song.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, song.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, song.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, song.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, song.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, song.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, song.IDLTE(*i.IDLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, song.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, song.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, song.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, song.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, song.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, song.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, song.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, song.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, song.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, song.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, song.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, song.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, song.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.ReleasedYear != nil {
		predicates = append(predicates, song.ReleasedYearEQ(*i.ReleasedYear))
	}
	if i.ReleasedYearNEQ != nil {
		predicates = append(predicates, song.ReleasedYearNEQ(*i.ReleasedYearNEQ))
	}
	if len(i.ReleasedYearIn) > 0 {
		predicates = append(predicates, song.ReleasedYearIn(i.ReleasedYearIn...))
	}
	if len(i.ReleasedYearNotIn) > 0 {
		predicates = append(predicates, song.ReleasedYearNotIn(i.ReleasedYearNotIn...))
	}
	if i.ReleasedYearGT != nil {
		predicates = append(predicates, song.ReleasedYearGT(*i.ReleasedYearGT))
	}
	if i.ReleasedYearGTE != nil {
		predicates = append(predicates, song.ReleasedYearGTE(*i.ReleasedYearGTE))
	}
	if i.ReleasedYearLT != nil {
		predicates = append(predicates, song.ReleasedYearLT(*i.ReleasedYearLT))
	}
	if i.ReleasedYearLTE != nil {
		predicates = append(predicates, song.ReleasedYearLTE(*i.ReleasedYearLTE))
	}
	if i.ArtistID != nil {
		predicates = append(predicates, song.ArtistIDEQ(*i.ArtistID))
	}
	if i.ArtistIDNEQ != nil {
		predicates = append(predicates, song.ArtistIDNEQ(*i.ArtistIDNEQ))
	}
	if len(i.ArtistIDIn) > 0 {
		predicates = append(predicates, song.ArtistIDIn(i.ArtistIDIn...))
	}
	if len(i.ArtistIDNotIn) > 0 {
		predicates = append(predicates, song.ArtistIDNotIn(i.ArtistIDNotIn...))
	}

	if i.HasArtist != nil {
		p := song.HasArtist()
		if !*i.HasArtist {
			p = song.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasArtistWith) > 0 {
		with := make([]predicate.Artist, 0, len(i.HasArtistWith))
		for _, w := range i.HasArtistWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasArtistWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, song.HasArtistWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptySongWhereInput
	case 1:
		return predicates[0], nil
	default:
		return song.And(predicates...), nil
	}
}
