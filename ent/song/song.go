// Code generated by ent, DO NOT EDIT.

package song

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the song type in the database.
	Label = "song"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldReleasedYear holds the string denoting the released_year field in the database.
	FieldReleasedYear = "released_year"
	// FieldArtistID holds the string denoting the artist_id field in the database.
	FieldArtistID = "artist_id"
	// EdgeArtist holds the string denoting the artist edge name in mutations.
	EdgeArtist = "artist"
	// Table holds the table name of the song in the database.
	Table = "songs"
	// ArtistTable is the table that holds the artist relation/edge.
	ArtistTable = "songs"
	// ArtistInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistInverseTable = "artists"
	// ArtistColumn is the table column denoting the artist relation/edge.
	ArtistColumn = "artist_id"
)

// Columns holds all SQL columns for song fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldReleasedYear,
	FieldArtistID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Song queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByReleasedYear orders the results by the released_year field.
func ByReleasedYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleasedYear, opts...).ToFunc()
}

// ByArtistID orders the results by the artist_id field.
func ByArtistID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtistID, opts...).ToFunc()
}

// ByArtistField orders the results by artist field.
func ByArtistField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistStep(), sql.OrderByField(field, opts...))
	}
}
func newArtistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ArtistTable, ArtistColumn),
	)
}
