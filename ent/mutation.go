// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Arthur1/economical-graphql-server-demo/ent/artist"
	"github.com/Arthur1/economical-graphql-server-demo/ent/predicate"
	"github.com/Arthur1/economical-graphql-server-demo/ent/song"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArtist = "Artist"
	TypeSong   = "Song"
)

// ArtistMutation represents an operation that mutates the Artist nodes in the graph.
type ArtistMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	songs         map[int]struct{}
	removedsongs  map[int]struct{}
	clearedsongs  bool
	done          bool
	oldValue      func(context.Context) (*Artist, error)
	predicates    []predicate.Artist
}

var _ ent.Mutation = (*ArtistMutation)(nil)

// artistOption allows management of the mutation configuration using functional options.
type artistOption func(*ArtistMutation)

// newArtistMutation creates new mutation for the Artist entity.
func newArtistMutation(c config, op Op, opts ...artistOption) *ArtistMutation {
	m := &ArtistMutation{
		config:        c,
		op:            op,
		typ:           TypeArtist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArtistID sets the ID field of the mutation.
func withArtistID(id int) artistOption {
	return func(m *ArtistMutation) {
		var (
			err   error
			once  sync.Once
			value *Artist
		)
		m.oldValue = func(ctx context.Context) (*Artist, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Artist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArtist sets the old Artist of the mutation.
func withArtist(node *Artist) artistOption {
	return func(m *ArtistMutation) {
		m.oldValue = func(context.Context) (*Artist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArtistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArtistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Artist entities.
func (m *ArtistMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArtistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArtistMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Artist.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ArtistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArtistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Artist entity.
// If the Artist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArtistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArtistMutation) ResetName() {
	m.name = nil
}

// AddSongIDs adds the "songs" edge to the Song entity by ids.
func (m *ArtistMutation) AddSongIDs(ids ...int) {
	if m.songs == nil {
		m.songs = make(map[int]struct{})
	}
	for i := range ids {
		m.songs[ids[i]] = struct{}{}
	}
}

// ClearSongs clears the "songs" edge to the Song entity.
func (m *ArtistMutation) ClearSongs() {
	m.clearedsongs = true
}

// SongsCleared reports if the "songs" edge to the Song entity was cleared.
func (m *ArtistMutation) SongsCleared() bool {
	return m.clearedsongs
}

// RemoveSongIDs removes the "songs" edge to the Song entity by IDs.
func (m *ArtistMutation) RemoveSongIDs(ids ...int) {
	if m.removedsongs == nil {
		m.removedsongs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.songs, ids[i])
		m.removedsongs[ids[i]] = struct{}{}
	}
}

// RemovedSongs returns the removed IDs of the "songs" edge to the Song entity.
func (m *ArtistMutation) RemovedSongsIDs() (ids []int) {
	for id := range m.removedsongs {
		ids = append(ids, id)
	}
	return
}

// SongsIDs returns the "songs" edge IDs in the mutation.
func (m *ArtistMutation) SongsIDs() (ids []int) {
	for id := range m.songs {
		ids = append(ids, id)
	}
	return
}

// ResetSongs resets all changes to the "songs" edge.
func (m *ArtistMutation) ResetSongs() {
	m.songs = nil
	m.clearedsongs = false
	m.removedsongs = nil
}

// Where appends a list predicates to the ArtistMutation builder.
func (m *ArtistMutation) Where(ps ...predicate.Artist) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArtistMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArtistMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Artist, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArtistMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArtistMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Artist).
func (m *ArtistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArtistMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, artist.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArtistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case artist.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArtistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case artist.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Artist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case artist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Artist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArtistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArtistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Artist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArtistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArtistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArtistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Artist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArtistMutation) ResetField(name string) error {
	switch name {
	case artist.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Artist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArtistMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.songs != nil {
		edges = append(edges, artist.EdgeSongs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArtistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case artist.EdgeSongs:
		ids := make([]ent.Value, 0, len(m.songs))
		for id := range m.songs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArtistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsongs != nil {
		edges = append(edges, artist.EdgeSongs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArtistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case artist.EdgeSongs:
		ids := make([]ent.Value, 0, len(m.removedsongs))
		for id := range m.removedsongs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArtistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsongs {
		edges = append(edges, artist.EdgeSongs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArtistMutation) EdgeCleared(name string) bool {
	switch name {
	case artist.EdgeSongs:
		return m.clearedsongs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArtistMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Artist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArtistMutation) ResetEdge(name string) error {
	switch name {
	case artist.EdgeSongs:
		m.ResetSongs()
		return nil
	}
	return fmt.Errorf("unknown Artist edge %s", name)
}

// SongMutation represents an operation that mutates the Song nodes in the graph.
type SongMutation struct {
	config
	op               Op
	typ              string
	id               *int
	title            *string
	released_year    *int
	addreleased_year *int
	clearedFields    map[string]struct{}
	artist           *int
	clearedartist    bool
	done             bool
	oldValue         func(context.Context) (*Song, error)
	predicates       []predicate.Song
}

var _ ent.Mutation = (*SongMutation)(nil)

// songOption allows management of the mutation configuration using functional options.
type songOption func(*SongMutation)

// newSongMutation creates new mutation for the Song entity.
func newSongMutation(c config, op Op, opts ...songOption) *SongMutation {
	m := &SongMutation{
		config:        c,
		op:            op,
		typ:           TypeSong,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSongID sets the ID field of the mutation.
func withSongID(id int) songOption {
	return func(m *SongMutation) {
		var (
			err   error
			once  sync.Once
			value *Song
		)
		m.oldValue = func(ctx context.Context) (*Song, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Song.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSong sets the old Song of the mutation.
func withSong(node *Song) songOption {
	return func(m *SongMutation) {
		m.oldValue = func(context.Context) (*Song, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SongMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SongMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Song entities.
func (m *SongMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SongMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SongMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Song.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *SongMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SongMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SongMutation) ResetTitle() {
	m.title = nil
}

// SetReleasedYear sets the "released_year" field.
func (m *SongMutation) SetReleasedYear(i int) {
	m.released_year = &i
	m.addreleased_year = nil
}

// ReleasedYear returns the value of the "released_year" field in the mutation.
func (m *SongMutation) ReleasedYear() (r int, exists bool) {
	v := m.released_year
	if v == nil {
		return
	}
	return *v, true
}

// OldReleasedYear returns the old "released_year" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldReleasedYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleasedYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleasedYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleasedYear: %w", err)
	}
	return oldValue.ReleasedYear, nil
}

// AddReleasedYear adds i to the "released_year" field.
func (m *SongMutation) AddReleasedYear(i int) {
	if m.addreleased_year != nil {
		*m.addreleased_year += i
	} else {
		m.addreleased_year = &i
	}
}

// AddedReleasedYear returns the value that was added to the "released_year" field in this mutation.
func (m *SongMutation) AddedReleasedYear() (r int, exists bool) {
	v := m.addreleased_year
	if v == nil {
		return
	}
	return *v, true
}

// ResetReleasedYear resets all changes to the "released_year" field.
func (m *SongMutation) ResetReleasedYear() {
	m.released_year = nil
	m.addreleased_year = nil
}

// SetArtistID sets the "artist_id" field.
func (m *SongMutation) SetArtistID(i int) {
	m.artist = &i
}

// ArtistID returns the value of the "artist_id" field in the mutation.
func (m *SongMutation) ArtistID() (r int, exists bool) {
	v := m.artist
	if v == nil {
		return
	}
	return *v, true
}

// OldArtistID returns the old "artist_id" field's value of the Song entity.
// If the Song object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SongMutation) OldArtistID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArtistID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArtistID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArtistID: %w", err)
	}
	return oldValue.ArtistID, nil
}

// ResetArtistID resets all changes to the "artist_id" field.
func (m *SongMutation) ResetArtistID() {
	m.artist = nil
}

// ClearArtist clears the "artist" edge to the Artist entity.
func (m *SongMutation) ClearArtist() {
	m.clearedartist = true
}

// ArtistCleared reports if the "artist" edge to the Artist entity was cleared.
func (m *SongMutation) ArtistCleared() bool {
	return m.clearedartist
}

// ArtistIDs returns the "artist" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArtistID instead. It exists only for internal usage by the builders.
func (m *SongMutation) ArtistIDs() (ids []int) {
	if id := m.artist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArtist resets all changes to the "artist" edge.
func (m *SongMutation) ResetArtist() {
	m.artist = nil
	m.clearedartist = false
}

// Where appends a list predicates to the SongMutation builder.
func (m *SongMutation) Where(ps ...predicate.Song) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SongMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SongMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Song, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SongMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SongMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Song).
func (m *SongMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SongMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, song.FieldTitle)
	}
	if m.released_year != nil {
		fields = append(fields, song.FieldReleasedYear)
	}
	if m.artist != nil {
		fields = append(fields, song.FieldArtistID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SongMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case song.FieldTitle:
		return m.Title()
	case song.FieldReleasedYear:
		return m.ReleasedYear()
	case song.FieldArtistID:
		return m.ArtistID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SongMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case song.FieldTitle:
		return m.OldTitle(ctx)
	case song.FieldReleasedYear:
		return m.OldReleasedYear(ctx)
	case song.FieldArtistID:
		return m.OldArtistID(ctx)
	}
	return nil, fmt.Errorf("unknown Song field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SongMutation) SetField(name string, value ent.Value) error {
	switch name {
	case song.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case song.FieldReleasedYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleasedYear(v)
		return nil
	case song.FieldArtistID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArtistID(v)
		return nil
	}
	return fmt.Errorf("unknown Song field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SongMutation) AddedFields() []string {
	var fields []string
	if m.addreleased_year != nil {
		fields = append(fields, song.FieldReleasedYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SongMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case song.FieldReleasedYear:
		return m.AddedReleasedYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SongMutation) AddField(name string, value ent.Value) error {
	switch name {
	case song.FieldReleasedYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReleasedYear(v)
		return nil
	}
	return fmt.Errorf("unknown Song numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SongMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SongMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SongMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Song nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SongMutation) ResetField(name string) error {
	switch name {
	case song.FieldTitle:
		m.ResetTitle()
		return nil
	case song.FieldReleasedYear:
		m.ResetReleasedYear()
		return nil
	case song.FieldArtistID:
		m.ResetArtistID()
		return nil
	}
	return fmt.Errorf("unknown Song field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SongMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.artist != nil {
		edges = append(edges, song.EdgeArtist)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SongMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case song.EdgeArtist:
		if id := m.artist; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SongMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SongMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SongMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedartist {
		edges = append(edges, song.EdgeArtist)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SongMutation) EdgeCleared(name string) bool {
	switch name {
	case song.EdgeArtist:
		return m.clearedartist
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SongMutation) ClearEdge(name string) error {
	switch name {
	case song.EdgeArtist:
		m.ClearArtist()
		return nil
	}
	return fmt.Errorf("unknown Song unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SongMutation) ResetEdge(name string) error {
	switch name {
	case song.EdgeArtist:
		m.ResetArtist()
		return nil
	}
	return fmt.Errorf("unknown Song edge %s", name)
}
