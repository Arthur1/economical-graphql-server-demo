directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Artist implements Node {
  id: ID!
  name: String!
  songs: [Song!]
}
"""A connection to a list of items."""
type ArtistConnection {
  """A list of edges."""
  edges: [ArtistEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ArtistEdge {
  """The item at the end of the edge."""
  node: Artist
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
ArtistWhereInput is used for filtering Artist objects.
Input was generated by ent.
"""
input ArtistWhereInput {
  not: ArtistWhereInput
  and: [ArtistWhereInput!]
  or: [ArtistWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """songs edge predicates"""
  hasSongs: Boolean
  hasSongsWith: [SongWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/Arthur1/economical-graphql-server-demo/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  artists(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Artists returned from the connection."""
    where: ArtistWhereInput
  ): ArtistConnection!
  songs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Songs returned from the connection."""
    where: SongWhereInput
  ): SongConnection!
}
type Song implements Node {
  id: ID!
  title: String!
  releasedYear: Int!
  artistID: ID!
  artist: Artist!
}
"""A connection to a list of items."""
type SongConnection {
  """A list of edges."""
  edges: [SongEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SongEdge {
  """The item at the end of the edge."""
  node: Song
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
SongWhereInput is used for filtering Song objects.
Input was generated by ent.
"""
input SongWhereInput {
  not: SongWhereInput
  and: [SongWhereInput!]
  or: [SongWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """released_year field predicates"""
  releasedYear: Int
  releasedYearNEQ: Int
  releasedYearIn: [Int!]
  releasedYearNotIn: [Int!]
  releasedYearGT: Int
  releasedYearGTE: Int
  releasedYearLT: Int
  releasedYearLTE: Int
  """artist_id field predicates"""
  artistID: ID
  artistIDNEQ: ID
  artistIDIn: [ID!]
  artistIDNotIn: [ID!]
  """artist edge predicates"""
  hasArtist: Boolean
  hasArtistWith: [ArtistWhereInput!]
}
